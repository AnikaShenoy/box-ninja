[{"/Users/natalievolk/Desktop/box-ninja-anika/box-ninja/box-ninja-site/src/index.js":"1","/Users/natalievolk/Desktop/box-ninja-anika/box-ninja/box-ninja-site/src/App.js":"2","/Users/natalievolk/Desktop/box-ninja-anika/box-ninja/box-ninja-site/src/components/Game.js":"3","/Users/natalievolk/Desktop/box-ninja-anika/box-ninja/box-ninja-site/src/components/Home.jsx":"4","/Users/natalievolk/Desktop/box-ninja-anika/box-ninja/box-ninja-site/src/components/Navigation.jsx":"5","/Users/natalievolk/Desktop/box-ninja-anika/box-ninja/box-ninja-site/src/components/Game_Gesture.jsx":"6","/Users/natalievolk/Desktop/box-ninja-anika/box-ninja/box-ninja-site/src/components/Game_Mouse.jsx":"7","/Users/natalievolk/Desktop/box-ninja-anika/box-ninja/box-ninja-site/src/components/Error.jsx":"8"},{"size":148,"mtime":1610099367286,"results":"9","hashOfConfig":"10"},{"size":842,"mtime":1610547129420,"results":"11","hashOfConfig":"10"},{"size":8449,"mtime":1610211736408,"results":"12","hashOfConfig":"10"},{"size":940,"mtime":1610549991657,"results":"13","hashOfConfig":"10"},{"size":273,"mtime":1610544319557,"results":"14","hashOfConfig":"10"},{"size":1549,"mtime":1610544319534,"results":"15","hashOfConfig":"10"},{"size":839,"mtime":1610544319538,"results":"16","hashOfConfig":"10"},{"size":187,"mtime":1610544319560,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"11awf5m",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"/Users/natalievolk/Desktop/box-ninja-anika/box-ninja/box-ninja-site/src/index.js",[],["38","39"],"/Users/natalievolk/Desktop/box-ninja-anika/box-ninja/box-ninja-site/src/App.js",[],"/Users/natalievolk/Desktop/box-ninja-anika/box-ninja/box-ninja-site/src/components/Game.js",["40"],"import React from 'react';\nimport * as THREE from 'https://cdn.jsdelivr.net/npm/three@0.114/build/three.module.js';\n \nconst Game = () => {\n   function main() {\n      const canvas = document.querySelector('#c');\n      const renderer = new THREE.WebGLRenderer({canvas, antialias: true});\n\n      // NOTE: if we didn't pass 'canvas' as an argument to WebGLRenderer (above),\n      // then we would have to set size and add renderer to HTML document:\n      //      renderer.setSize(window.innerWidth, window.InnerHeight);\n      //      document.body.appendChild(renderer.domElement);\n\n      // trying to make raycaster work\n      var raycaster = new THREE.Raycaster();\n      let intersectedBox;\n\n      // points keeper\n      var points = 0;\n\n      // REMOVE when implementing handtrack\n      document.addEventListener( 'mousemove', onDocumentMouseMove, false );\n\n      // need 3 things to display with three.js --> scene, camera, renderer\n      // create a new scene\n      var scene = new THREE.Scene();\n\n      // creating a directional light to give box definition\n      const color = 0xFFFFFF;\n      const intensity = 1;\n      const light = new THREE.DirectionalLight(color, intensity);\n\n      // directional lights have a position and target --> default of both is (0,0,0)\n      // setting position to (-1,2,4) --> left, above, and behind our camera\n      // leaving target as default (so it will shine to origin)\n      light.position.set(-1, 2, 4);\n      scene.add(light);\n\n      // PerspectiveCamera mimics the way humans see a scene\n      // 75 --> FOV (in degrees)\n      // IW/IH --> aspect ratio\n      // 0.1 --> near, 500 --> far; this means that objects closer / farther won't be rendered\n      var camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 500);\n      // moving camera out in z-plane\n      camera.position.z = 5;\n\n\n      // function that makes a new material with  specified geometry, color, \n      //  and x- and y-coordinates\n      function makeShape(geometry, color, coordinates) {\n         // often, we'd use:\n         //      var material = new THREE.MeshBasicMaterial({color: 0x00ff00});\n         // but, we need to use MeshPhongMaterial, which is affected by lights\n         const material = new THREE.MeshPhongMaterial({color})\n\n         // mesh is an object that takes geometry and material objects which can be inserted into scene\n         const cube = new THREE.Mesh(geometry, material);\n         scene.add(cube);\n\n         // by default, object is added to coordinates (0,0,0), but can be changed:\n         cube.position.x = coordinates[0];\n         cube.position.y = coordinates[1];\n         cube.position.z = -10;\n\n         return cube;\n      }\n\n      // REMOVE when implemented handtrack\n      // create mouse vector and track movement\n      const mouse = new THREE.Vector2();\n      function onDocumentMouseMove( event ) {\n\n         event.preventDefault();\n\n         mouse.x = ( event.clientX / window.innerWidth ) * 2 - 1;\n         mouse.y = - ( event.clientY / window.innerHeight ) * 2 + 1;\n\n      }\n\n      // FONTS FOR POINT TOTAL --> should work once multi-page website is made\n      // SOURCE: https://threejs.org/docs/#api/en/geometries/TextGeometry\n      /*\n      function printPoints(points) {\n         const loader = new THREE.FontLoader();\n\n         let text = \"Points: \" + points;\n\n         loader.load( 'fonts/helvetiker_regular.typeface.json', function ( font ) {\n\n            const geometry = new THREE.TextGeometry(text, {\n                  font: font,\n                  size: 10,\n                  height: 5,\n                  curveSegments: 12,\n                  bevelEnabled: true,\n                  bevelThickness: 10,\n                  bevelSize: 8,\n                  bevelOffset: 0,\n                  bevelSegments: 5\n            } );\n         } );\n      }\n      */\n\n      // creating the cube geometry\n      var geometry = new THREE.BoxGeometry(1, 1.2, 1);\n      // array to randomize colours for the cubes\n      var colours = [\n         0x8844aa,\n         0x4deeea,\n         0x74ee15,\n         0xffe700,\n         0xf000ff,\n         0x001eff,\n         0xFF0000,\n         0xC724B1,\n         0xfeaf2f,\n         0xfe17a2,\n         0x40e0d0\n      ];\n      // array to randomize speeds for the cubes \n      var speeds = [\n         0.1,\n         0.15,\n         0.2,\n         0.12,\n         0.18,\n         0.19,\n         0.15,\n         0.13\n      ];\n      // array to append cubes as needed\n      var cubes = [\n         makeShape(geometry, colours[Math.floor(Math.random()*11)], [0,0]),\n      ];\n      \n      // this creates a loop that will keep on rendering the app everytime the page refreshes\n      function render(time) { // time is given in milliseconds (ms)\n         time *= 0.001 // convert time from milliseconds to seconds\n\n         // randomly generate colour for the cube\n         var colour = colours[Math.floor(Math.random()*10)];\n\n\n//TODO: decide on which way of randomizing cubes is better\n         \n      //option 1:\n         // these if-statements \"randomly\" generate the cubes and the cube's location\n         //  since based on time, the intervals are more even\n         if (time % 5 < 0.02) {\n            cubes.push(makeShape(geometry, colour, [Math.random()*5, Math.random()*2.5]))\n         }\n         else if (time % 4 < 0.02) {\n            cubes.push(makeShape(geometry, colour, [Math.random()*-5, Math.random()*-2.5]))\n         }\n         else if (time % 3 < 0.02) {\n            cubes.push(makeShape(geometry, colour, [Math.random()*-5, Math.random()*2.5]))\n         }\n         else if (time % 2 < 0.02) {\n            cubes.push(makeShape(geometry, colour, [Math.random()*5, Math.random()*-2.5]))\n         }\n         \n      // option 2:\n         // since this is truly random, intervals can be uneven\n         /*\n         var random = Math.random() / 1.5;\n         if (random < 0.001) {\n            cubes.push(makeShape(geometry, colour, [Math.random()*5, Math.random()*2.5]));\n         }\n         else if (random > 0.001 && Math.random() < 0.002) {\n            cubes.push(makeShape(geometry, colour, [Math.random()*-5, Math.random()*-2.5]));\n         }\n         else if (random > 0.002 && Math.random() < 0.003) {\n            cubes.push(makeShape(geometry, colour, [Math.random()*-5, Math.random()*2.5]))\n         }\n         else if (random > 0.003 && Math.random() < 0.004) {\n            cubes.push(makeShape(geometry, colour, [Math.random()*5, Math.random()*-2.5]))\n         }\n         */\n         \n\n         // this sets the speed of each cube (because we're translating it by a bit\n         //  in each frame)\n         cubes.forEach((cube, index) => {  // => is just a way to shorten the syntax\n            \n            // speed is randomly chosen from the array of possible speeds\n            cube.translateZ(speeds[Math.floor(Math.random()*8)]);\n         });\n\n         // setting up raycaster and finding intersections (where mouse vector intersects with box)\n      raycaster.setFromCamera( mouse, camera );\n         const intersects = raycaster.intersectObjects(scene.children);\n\n         console.log(intersects);\n\n         if (intersects.length > 0) {\n            // when mouse is over the box, it lights up and is removed from scene\n            if (intersectedBox != intersects[0].object ) {\n                  intersectedBox = intersects[ 0 ].object;\n                  // box lights up\n                  intersectedBox.material.emissive.setHex(0xff0000);\n                  intersectedBox.currentHex = intersectedBox.material.emissive.getHex();\n                  intersectedBox.material.color.setHex(0xFFFFFF);\n                  // after 15ms, box is removed from scene\n                  setTimeout(() => { scene.remove(intersectedBox); }, 15);\n                  // increase points by 10\n                  points += 10;\n                  console.log(points);\n            }\n\n         } else {\n            if ( intersectedBox ) intersectedBox.material.emissive.setHex( intersectedBox.currentHex );\n            // set intersected box to null\n            intersectedBox = null;\n         }\n         \n         //printPoints(points);\n\n         // this actually draws the scene\n         renderer.render(scene, camera);\n         \n         requestAnimationFrame(render);\n      }\n      requestAnimationFrame(render);\n   }\n   main();     \n    return (\n      <div>\n         <h1>Box Ninja | Game Page</h1>\n      </div>\n    );\n}\n \nexport default Game;",["41","42"],"/Users/natalievolk/Desktop/box-ninja-anika/box-ninja/box-ninja-site/src/components/Home.jsx",[],"/Users/natalievolk/Desktop/box-ninja-anika/box-ninja/box-ninja-site/src/components/Navigation.jsx",[],["43","44"],"/Users/natalievolk/Desktop/box-ninja-anika/box-ninja/box-ninja-site/src/components/Game_Gesture.jsx",[],"/Users/natalievolk/Desktop/box-ninja-anika/box-ninja/box-ninja-site/src/components/Game_Mouse.jsx",[],"/Users/natalievolk/Desktop/box-ninja-anika/box-ninja/box-ninja-site/src/components/Error.jsx",[],{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","severity":1,"message":"50","line":198,"column":32,"nodeType":"51","messageId":"52","endLine":198,"endColumn":34},{"ruleId":"45","replacedBy":"53"},{"ruleId":"47","replacedBy":"54"},{"ruleId":"45","replacedBy":"55"},{"ruleId":"47","replacedBy":"56"},"no-native-reassign",["57"],"no-negated-in-lhs",["58"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected",["57"],["58"],["57"],["58"],"no-global-assign","no-unsafe-negation"]